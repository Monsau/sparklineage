#!/usr/bin/env python3
"""
SCRIPT DE SETUP AUTOMATIQUE POUR LINEAGE SPARK OPENMETADATA
Configure automatiquement tous les composants requis
"""

import requests
import json
import time
import os
from urllib.parse import quote

class OpenMetadataLineageSetup:
    """
    Classe pour automatiser le setup du lineage Spark OpenMetadata
    """
    
    def __init__(self, om_url="http://localhost:8585/api", jwt_token=None):
        self.om_url = om_url
        self.jwt_token = jwt_token
        self.headers = {
            "Authorization": f"Bearer {jwt_token}" if jwt_token else "",
            "Content-Type": "application/json"
        }
    
    def wait_for_openmetadata(self, max_retries=30):
        """Attend que OpenMetadata soit accessible"""
        print("‚è≥ Attente de d√©marrage d'OpenMetadata...")
        
        for i in range(max_retries):
            try:
                response = requests.get(f"{self.om_url}/v1/system/version", timeout=5)
                if response.status_code == 200:
                    version = response.json().get('version', 'Unknown')
                    print(f"‚úÖ OpenMetadata accessible - Version: {version}")
                    return True
            except:
                pass
                
            print(f"   Tentative {i+1}/{max_retries}...")
            time.sleep(10)
        
        print("‚ùå Timeout - OpenMetadata non accessible")
        return False
    
    def create_database_service(self, service_name, mysql_host, mysql_port, database):
        """Cr√©e un service de base de donn√©es MySQL"""
        print(f"üîß Cr√©ation du service: {service_name}")
        
        service_data = {
            "name": service_name,
            "serviceType": "Mysql",
            "connection": {
                "config": {
                    "type": "Mysql",
                    "scheme": "mysql+pymysql",
                    "username": "root",
                    "password": "password",
                    "hostPort": f"{mysql_host}:{mysql_port}",
                    "database": database
                }
            },
            "description": f"Service MySQL pour {service_name}"
        }
        
        try:
            response = requests.post(
                f"{self.om_url}/v1/services/databaseServices",
                headers=self.headers,
                json=service_data
            )
            
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ Service {service_name} cr√©√©")
                return True
            elif response.status_code == 409:
                print(f"   ‚ÑπÔ∏è Service {service_name} existe d√©j√†")
                return True
            else:
                print(f"   ‚ùå Erreur: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            return False
    
    def trigger_metadata_ingestion(self, service_name):
        """D√©clenche l'ingestion metadata pour un service"""
        print(f"üìä D√©clenchement ingestion metadata: {service_name}")
        
        # Configuration d'ingestion simplifi√©e
        ingestion_data = {
            "name": f"metadata_ingestion_{service_name}",
            "service": {
                "type": "databaseService"
            },
            "sourceConfig": {
                "config": {
                    "type": "DatabaseMetadata"
                }
            },
            "airflowConfig": {},
            "pipelineType": "metadata"
        }
        
        try:
            # Note: L'API d'ingestion peut varier selon la version
            # Cette impl√©mentation est basique et peut n√©cessiter des ajustements
            print(f"   ‚ÑπÔ∏è Ingestion configur√©e pour {service_name}")
            print(f"   üìù Utilisez l'interface UI pour d√©clencher l'ingestion si n√©cessaire")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Erreur ingestion: {e}")
            return False
    
    def verify_tables_exist(self, expected_tables):
        """V√©rifie que les tables attendues existent"""
        print("üîç V√©rification des tables...")
        
        found_tables = []
        
        for table_fqn in expected_tables:
            try:
                encoded_fqn = quote(table_fqn, safe='')
                response = requests.get(
                    f"{self.om_url}/v1/tables/name/{encoded_fqn}",
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    table_data = response.json()
                    found_tables.append(table_data['name'])
                    print(f"   ‚úÖ {table_data['name']} trouv√©e")
                else:
                    print(f"   ‚ùå {table_fqn} non trouv√©e")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification {table_fqn}: {e}")
        
        return found_tables
    
    def download_spark_agent_jar(self, download_path="./jars"):
        """T√©l√©charge le JAR OpenMetadata Spark Agent"""
        print("üì¶ T√©l√©chargement OpenMetadata Spark Agent JAR...")
        
        # URL du JAR OpenMetadata Spark Agent version 1.0
        jar_url = "https://github.com/open-metadata/openmetadata-spark-agent/releases/download/1.0/openmetadata-spark-agent-1.0.jar"
        jar_filename = "openmetadata-spark-agent.jar"
        
        os.makedirs(download_path, exist_ok=True)
        jar_path = os.path.join(download_path, jar_filename)
        
        try:
            if os.path.exists(jar_path):
                print(f"   ‚ÑπÔ∏è JAR existe d√©j√†: {jar_path}")
                return jar_path
                
            import urllib.request
            urllib.request.urlretrieve(jar_url, jar_path)
            print(f"   ‚úÖ JAR t√©l√©charg√©: {jar_path}")
            return jar_path
            
        except Exception as e:
            print(f"   ‚ùå Erreur t√©l√©chargement: {e}")
            print(f"   üìù T√©l√©chargez manuellement depuis: {jar_url}")
            return None
    
    def setup_complete_environment(self):
        """Setup complet de l'environnement lineage"""
        print("=" * 60)
        print("üöÄ SETUP AUTOMATIQUE LINEAGE SPARK OPENMETADATA")
        print("=" * 60)
        
        # √âtape 1: Attendre OpenMetadata
        if not self.wait_for_openmetadata():
            return False
        
        # √âtape 2: Cr√©er les services de base de donn√©es
        services_created = True
        
        services_config = [
            ("mysql-source-service", "mysql-source", 3306, "source_db"),
            ("mysql-target-service", "mysql-target", 3306, "target_db")
        ]
        
        for service_name, host, port, database in services_config:
            if not self.create_database_service(service_name, host, port, database):
                services_created = False
        
        if not services_created:
            print("‚ùå Erreur lors de la cr√©ation des services")
            return False
        
        # √âtape 3: D√©clencher l'ingestion metadata
        for service_name, _, _, _ in services_config:
            self.trigger_metadata_ingestion(service_name)
        
        # √âtape 4: T√©l√©charger le JAR Spark Agent
        jar_path = self.download_spark_agent_jar()
        
        # √âtape 5: V√©rifier les tables (apr√®s un d√©lai pour l'ingestion)
        print("\n‚è≥ Attente de l'ingestion metadata (30 secondes)...")
        time.sleep(30)
        
        expected_tables = [
            "mysql-source-service.source_db.source_db.customers",
            "mysql-target-service.target_db.target_db.customers_copy"
        ]
        
        found_tables = self.verify_tables_exist(expected_tables)
        
        # R√©sum√©
        print("\n" + "=" * 60)
        print("üìã R√âSUM√â DU SETUP")
        print("=" * 60)
        print(f"‚úÖ Services cr√©√©s: {len(services_config)}")
        print(f"‚úÖ Tables trouv√©es: {len(found_tables)}")
        print(f"‚úÖ JAR Spark Agent: {'Oui' if jar_path else 'Non'}")
        
        if len(found_tables) == len(expected_tables) and jar_path:
            print("\nüéâ SETUP COMPLET R√âUSSI!")
            print("Vous pouvez maintenant ex√©cuter votre script Spark avec lineage")
            return True
        else:
            print("\n‚ö†Ô∏è Setup partiellement r√©ussi")
            print("V√©rifiez manuellement les composants manquants")
            return False

def main():
    """Script principal de setup"""
    
    # Configuration
    OPENMETADATA_URL = "http://localhost:8585/api"
    JWT_TOKEN = "eyJraWQiOiJHYjM4OWEtOWY3Ni1nZGpzLWE5MmotMDI0MmJrOTQzNTYiLCJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJvcGVuLW1ldGFkYXRhLm9yZyIsInN1YiI6ImdlbmVyaWMtaW5nZXN0aW9uLWJvdCIsInJvbGVzIjpbXSwiZW1haWwiOiJnZW5lcmljLWluZ2VzdGlvbi1ib3RAdGFsZW50eXMuZXUiLCJpc0JvdCI6dHJ1ZSwidG9rZW5UeXBlIjoiQk9UIiwiaWF0IjoxNzU4MTM2NTI4LCJleHAiOm51bGx9.Hy4ed-YPdwKeZ71viL1G2JmQzo-gSdfa7MiKGj8ujgx4znEjuzFqRl15mhqsKjhSjnU-f6v_IV1Qe5kcxxaKScxq3HPPGF6snl2CgZBPXCu9QhSDQBLZO5FIY-vy8h9iLQXOYNoYj79-y7Xqu82O15vLpzHjh4_fOXJ59X0_oiq3NpIrv8eUv93K-nFqDwNPF00SwykEuoRcYNnhWueOy8e_MVkWv66kT74YKqS-iS-c6w18i0YXNnkUwt_RvzMf7-ZI6xuSV7A6xrWdFpC_2rIUJluBR2BWooLwDaA578KkjX8Rqe8VLA2vIBJlKw97Q1JY0a34lRGCiIk2HJBVHQ"  # Remplacez par votre token
    
    # Cr√©er et ex√©cuter le setup
    setup = OpenMetadataLineageSetup(OPENMETADATA_URL, JWT_TOKEN)
    success = setup.setup_complete_environment()
    
    if success:
        print("\nüéØ PROCHAINES √âTAPES:")
        print("1. Utilisez le template spark_lineage_template.py")
        print("2. Remplacez YOUR_ACTUAL_JWT_TOKEN par votre token")
        print("3. Ex√©cutez votre script Spark pour g√©n√©rer le lineage")
    else:
        print("\n‚ö†Ô∏è ACTIONS REQUISES:")
        print("1. V√©rifiez que Docker Compose est d√©marr√©")
        print("2. V√©rifiez l'accessibilit√© d'OpenMetadata")
        print("3. D√©clenchez manuellement l'ingestion metadata si n√©cessaire")

if __name__ == "__main__":
    main()